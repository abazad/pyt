"""This module contains a vulnerability log.

This log is able to give precise information
 about where a vulnerability is located.
The log is printed to standard output.
"""


class VulnerabilityLog():
    """Log that consists of vulnerabilities."""

    def __init__(self):
        """Initialise list of vulnerabilities."""
        self.vulnerabilities = list()

    def append(self, vulnerability):
        """Add vulnerability to the vulnerabilities list."""
        # We should have different vuln list for real, sanitised, and unknown

        self.vulnerabilities.append(vulnerability)

    def print_report(self):
        """Print list of vulnerabilities."""
        number_of_vulnerabilities = len(self.vulnerabilities)
        if number_of_vulnerabilities == 1:
            print('%s vulnerability found:' % number_of_vulnerabilities)
        else:
            print('%s vulnerabilities found:' % number_of_vulnerabilities)

        for i, vulnerability in enumerate(self.vulnerabilities, start=1):
            print('Vulnerability {}:\n{}\n'.format(i, vulnerability))


class Reassigned():
    def __init__(self, secondary_nodes):
        self.secondary_nodes = secondary_nodes

    def __str__(self):
        secondary = ''
        if self.secondary_nodes:
            secondary += '\nReassigned in: \n\t'
            secondary += '\n\t'.join([
                'File: ' + node.path + '\n\t' + ' > Line ' +
                str(node.line_number) + ': ' +
                node.label for node in self.secondary_nodes])
        return secondary


class Vulnerability():
    """Vulnerability containing the source and the sources trigger word,
    the sink and the sinks trigger word."""

    def __init__(self, source, source_trigger_word,
                 sink, sink_trigger_word, secondary_nodes):
        """Set source and sink information."""
        self.source = source
        self.source_trigger_word = source_trigger_word
        self.sink = sink
        self.sink_trigger_word = sink_trigger_word
        self.secondary_nodes = secondary_nodes

        self.__remove_sink_from_secondary_nodes()

    def __remove_sink_from_secondary_nodes(self):
        if self.secondary_nodes:
            try:
                self.secondary_nodes.remove(self.sink)
            except ValueError:
                pass

    def __str__(self):
        """Pretty printing of a vulnerability."""
        reassigned_str = Reassigned(self.secondary_nodes)
        return ('File: {}\n > User input at line {}, trigger word "{}":'
                ' \n\t{}{}\nFile: {}\n > reaches line {}, trigger word'
                ' "{}": \n\t{}'.format(
                    self.source.path, self.source.line_number,
                    self.source_trigger_word, self.source.label,
                    reassigned_str, self.sink.path, self.sink.line_number,
                    self.sink_trigger_word, self.sink.label))


class SanitisedVulnerability(Vulnerability):
    """A sanitised vulnerability containing the source and the sources
    trigger word, the sink and the sinks trigger word.
    Also containing the sanitiser."""

    def __init__(self, source, source_trigger_word,
                 sink, sink_trigger_word, sanitiser, secondary_nodes):
        """Set source, sink and sanitiser information."""
        super().__init__(source, source_trigger_word,
                         sink, sink_trigger_word, secondary_nodes)
        self.sanitiser = sanitiser

    def __str__(self):
        """Pretty printing of a vulnerability."""
        super_str = super().__str__()
        return super_str + ('\nThis vulnerability is potentially sanitised by:'
                            ' {}'.format(self.sanitiser))


class UnknownVulnerability(Vulnerability):
    """An unknown vulnerability containing the source and the sources
    trigger word, the sink and the sinks trigger word.
    Also containing the blackbox call."""

    def __init__(self, source, source_trigger_word,
                 sink, sink_trigger_word, blackbox_call, secondary_nodes):
        """Set source, sink and blackbox call information."""
        super().__init__(source, source_trigger_word,
                         sink, sink_trigger_word, secondary_nodes)
        self.blackbox_call = blackbox_call

    def __str__(self):
        """Pretty printing of a vulnerability."""
        super_str = super().__str__()
        return super_str + ('\nThis vulnerability is potentially unknown by:'
                            ' {}'.format(self.blackbox_call))
